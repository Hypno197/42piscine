int solve_grid(char **grid, char    *views, int row, int col)
{
    char    num;

    while (++row < 4)
    {
        col = -1;
        while (++col < 4)
            if (grid[row][col] == '0')
            {
                num = '0';
                while (++num <= '4')
                    if (is_valid(grid, row, col, num))
                    {
                        grid[row][col] = num;
                        if (solve_grid(grid, views))
                            return (1);
                        grid[row][col] = '0';
                    }
                return (0);
            }
        row++;
    }
    if (check_visibility(grid, views))
        return print_grid(grid);
    return (0);
}




int print_grid(char **grid)
{
    int i;
    int j;

    i = 0;
    while (i < 4)
    {
        j = 0;
        while (j < 4)
        {
            write(1, &grid[i][j], 1);
            if (j < 3)
                write(1, " ", 1);
            j++;
        }
        write(1, "\n", 1);
        i++;
    }
    return (1)
}





int main(int ac, char **av)
{
    char    **matrix;
    char    *views;

    if (ac != 2)
    {
        write(1, "Error\n", 6);
        return (1);
    }
    matrix = crgrid();
    if (!matrix)
    {
        write(1, "Error\n", 6);
        return (1);
    }
    views = extract_views(av[1]);
    if (*views == 'E')
    {
        write(1, "Error\n", 6);
        return (1);
    }
    if (!solve_grid(matrix, views, -1, -1))
        write(1, "Error\n", 6);
    return (0);
